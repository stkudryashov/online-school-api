from django.core.management.base import BaseCommand

from django.core.validators import validate_email
from django.core.exceptions import ValidationError

from telegram import Update
from telegram.ext import Updater, Filters, CallbackContext
from telegram.ext import CommandHandler, MessageHandler, ConversationHandler, CallbackQueryHandler

from accounts.models import User
from telegrambot.models import BotAnswer

from telegrambot.management.commands.services import get_user_keyboard, change_user_type

from telegrambot.management.commands.keyboard import LOGIN_BUTTON

from telegrambot.management.commands.students import courses_list, modules_list, lessons_list, lessons_view
from telegrambot.management.commands.students import homeworks_list, homeworks_send

from telegrambot.management.commands.teachers import classrooms_list, teacher_lessons, lesson_info

from telegrambot.management.commands.students import HOMEWORK_URL

import logging
import telegram

import os


logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.environ.get('TOKEN')

START_LOGIN, USER_EMAIL = range(2)


def start(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    if User.objects.filter(telegram_id=update.message.chat_id).exists():
        user = User.objects.get(telegram_id=update.message.chat_id)

        update.message.reply_text(
            '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üñ•',
            reply_markup=get_user_keyboard(user)
        )

        return ConversationHandler.END

    update.message.reply_text(
        text=BotAnswer.objects.get(query='–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ').text,
        reply_markup=LOGIN_BUTTON
    )

    return START_LOGIN


def login(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É"""

    update.message.reply_text(BotAnswer.objects.get(query='–ó–∞–ø—Ä–æ—Å –ø–æ—á—Ç—ã').text)
    return USER_EMAIL


def email(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–æ—á—Ç—ã, –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç telegram_id"""

    user_email = update.message.text

    try:
        validate_email(user_email)

        if not User.objects.filter(email=user_email, telegram_id__isnull=True).exists():
            update.message.reply_text(BotAnswer.objects.get(query='–ü–æ—á—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞').text)
            return USER_EMAIL

        user = User.objects.get(email=user_email)

        user.telegram_id = update.message.chat_id
        user.save()

        update.message.reply_text(
            f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {user.first_name}!',
            reply_markup=get_user_keyboard(user)
        )

        return ConversationHandler.END
    except ValidationError:
        update.message.reply_text(BotAnswer.objects.get(query='–û—à–∏–±–∫–∞ –ø–æ—á—Ç—ã').text)
        return USER_EMAIL


def messages(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∏–∂–Ω–µ–≥–æ –º–µ–Ω—é"""

    if not User.objects.filter(telegram_id=update.message.chat_id).exists():
        update.message.reply_text(BotAnswer.objects.get(query='–ù–µ –ø–æ–Ω–∏–º–∞—é').text)
        return

    user = User.objects.get(telegram_id=update.message.chat_id)

    message = update.message.text

    if message == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üñ•':
        start(update, context)

    if user.type == 'teacher':
        if message == '–ú–æ–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã üßëüèº‚Äçüéì':
            classrooms_list(update)
        else:
            update.message.reply_text(BotAnswer.objects.get(query='–ù–µ –ø–æ–Ω–∏–º–∞—é').text)
    else:
        if message == '–ú–æ–∏ –∫—É—Ä—Å—ã üíº':
            courses_list(update)
        elif message == '–°–¥–∞—Ç—å —Ä–∞–±–æ—Ç—É üéí':
            homeworks_list(update)
        else:
            update.message.reply_text(BotAnswer.objects.get(query='–ù–µ –ø–æ–Ω–∏–º–∞—é').text)


def callbacks(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""

    button_press = update.callback_query

    if 'CoursesList' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            courses_list(button_press)
    elif 'ModulesList' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            course_id = button_press.data.split(' ')[1]
            modules_list(button_press, course_id)
    elif 'LessonsList' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            module_id = button_press.data.split(' ')[1]
            course_id = button_press.data.split(' ')[2]
            lessons_list(button_press, module_id, course_id)
    elif 'LessonsView' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            schedule_id = button_press.data.split(' ')[1]
            back_location = button_press.data.split(' ')[2]
            lessons_view(button_press, schedule_id, back_location)
    elif 'HomeworksList' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            homeworks_list(button_press)
    elif 'HomeworksSend' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            schedule_id = button_press.data.split(' ')[1]
            context.user_data['schedule_id'] = schedule_id
            button_press.message.reply_text('–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É üìö')
            return HOMEWORK_URL
    elif 'ClassroomsList' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            classrooms_list(button_press)
    elif 'TeacherClassroom' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            classroom_id = button_press.data.split(' ')[1]
            teacher_lessons(button_press, classroom_id)
    elif 'TeacherLesson' in button_press.data:
        try:
            button_press.message.delete()
        except telegram.TelegramError:
            pass
        finally:
            classroom_id = button_press.data.split(' ')[1]
            schedule_id = button_press.data.split(' ')[2]
            lesson_info(button_press, classroom_id, schedule_id)


class Command(BaseCommand):
    def handle(self, *args, **options):
        updater = Updater(TOKEN)

        dispatcher = updater.dispatcher

        login_handler = ConversationHandler(
            entry_points=[CommandHandler('start', start)],
            states={
                START_LOGIN: [MessageHandler(Filters.text(['–í–æ–π—Ç–∏ üè´']), login)],
                USER_EMAIL: [MessageHandler(Filters.text & ~Filters.command, email)],
            },
            fallbacks=[CommandHandler('cancel', start)],
        )
        dispatcher.add_handler(login_handler)

        homework_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(callbacks)],
            states={
                HOMEWORK_URL: [MessageHandler(Filters.text & ~Filters.command, homeworks_send)],
            },
            fallbacks=[CommandHandler('cancel', start)],
        )
        dispatcher.add_handler(homework_handler)

        msg_handler = MessageHandler(Filters.text & ~Filters.command, messages)
        dispatcher.add_handler(msg_handler)

        btn_handler = CallbackQueryHandler(callbacks)
        dispatcher.add_handler(btn_handler)

        # –°–º–µ–Ω–∞ —Ç–∏–ø–∞ —Å–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è superuser)
        dispatcher.add_handler(CommandHandler('type', change_user_type))

        updater.start_polling()
        updater.idle()
