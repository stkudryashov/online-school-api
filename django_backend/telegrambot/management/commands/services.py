from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, ConversationHandler

from accounts.models import User
from classrooms.models import Schedule
from courses.models import Course
from telegrambot.models import BotAnswer

from classrooms.services import get_student_courses, get_student_lessons, send_student_homework

from telegram import Update


START_LOGIN, USER_EMAIL = range(2)
HOMEWORK_URL = range(1)


def courses_list(update: Update.callback_query):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –∫—É—Ä—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –æ–Ω —É—á–∏—Ç—Å—è"""

    user = User.objects.get(telegram_id=update.message.chat_id)
    user_courses = get_student_courses(user)

    reply_markup = InlineKeyboardMarkup.from_column(
        [InlineKeyboardButton(
            i.get('course__title'), callback_data=f"ModulesList {i.get('course_id')}"
        ) for i in user_courses]
    )

    update.message.reply_text('–°–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫—É—Ä—Å–æ–≤ üìù', reply_markup=reply_markup)


def modules_list(update: Update.callback_query, course_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –º–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –≤—ã–±—Ä–∞–ª"""

    course = Course.objects.get(id=course_id)

    reply_markup = InlineKeyboardMarkup.from_column(
        [InlineKeyboardButton(
            module.title, callback_data=f'LessonsList {module.id} {course_id}'
        ) for module in course.modules.all()] + [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚è™', callback_data='CoursesList')]
    )

    update.message.reply_text('–ú–æ–¥—É–ª–∏ –≤ —ç—Ç–æ–º –∫—É—Ä—Å–µ üìù', reply_markup=reply_markup)


def lessons_list(update: Update.callback_query, module_id, course_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É —É—Ä–æ–∫–∏ –∏–∑ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

    user = User.objects.get(telegram_id=update.message.chat_id)
    user_lessons = get_student_lessons(user, module_id, course_id)

    back_button = [InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚è™', callback_data=f'ModulesList {course_id}')]

    if not user_lessons:
        reply_markup = InlineKeyboardMarkup.from_column(back_button)
        update.message.reply_text('–£ —Ç–µ–±—è –µ—â–µ –Ω–µ –±—ã–ª–æ —É—Ä–æ–∫–æ–≤ –ø–æ —ç—Ç–æ–º—É –º–æ–¥—É–ª—é üò¢', reply_markup=reply_markup)
        return

    reply_markup = InlineKeyboardMarkup.from_column(
        [InlineKeyboardButton(
            i.get('lesson__title'), callback_data=f"LessonsView {i.get('id')} lessons_list"
        ) for i in user_lessons] + back_button
    )

    update.message.reply_text('–ü—Ä–æ—à–µ–¥—à–∏–µ —É—Ä–æ–∫–∏ üìö', reply_markup=reply_markup)


def lessons_view(update: Update.callback_query, schedule_id, back_location):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É –≤—ã–±—Ä–∞–Ω–Ω—ã–π —É—Ä–æ–∫ (–º–∞—Ç–µ—Ä–∏–∞–ª—ã, —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è)"""

    user = User.objects.get(telegram_id=update.message.chat_id)
    schedule = Schedule.objects.get(id=schedule_id)

    schedule_title = schedule.lesson.title.replace('.', '\.')
    hw_status = '–ù–µ —Å–¥–∞–Ω–æ'

    message = f"*–£—Ä–æ–∫*: _{schedule_title}_\n"

    keyboard = [InlineKeyboardButton('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã —É—Ä–æ–∫–∞ üìí', url=schedule.lesson.document_url)]

    if schedule.homeworks.filter(student=user).exists():
        homework = schedule.homeworks.get(student=user)

        if homework.is_accepted:
            hw_status = '–ó–∞—á—Ç–µ–Ω–æ'
        else:
            hw_status = '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ'
            keyboard.append(InlineKeyboardButton('–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ üìÑ', callback_data=f'HomeworksSend {schedule.id}'))
    else:
        keyboard.append(InlineKeyboardButton('–°–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ üìÑ', callback_data=f'HomeworksSend {schedule.id}'))

    message += f'*–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ*: _{hw_status}_'

    if back_location == 'lessons_list':
        keyboard.append(
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥ ‚è™',
                callback_data=f'LessonsList {schedule.lesson.module_id} {schedule.classroom.course_id}')
        )
    else:
        keyboard.append(
            InlineKeyboardButton(
                text='–ù–∞–∑–∞–¥ ‚è™',
                callback_data='HomeworksList')
        )

    reply_markup = InlineKeyboardMarkup.from_column(keyboard)
    update.message.reply_markdown_v2(message, reply_markup=reply_markup)


def homeworks_list(update: Update.callback_query):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç—É —É—Ä–æ–∫–∏ —Ç—Ä–µ–±—É—é—â–∏–µ —Å–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""

    user = User.objects.get(telegram_id=update.message.chat_id)
    user_lessons = get_student_lessons(user, wait_homework=True)

    if not user_lessons:
        update.message.reply_text('–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏–ª–∏ —Ç—Ä–µ–±—É—é—â–∏—Ö —Å–¥–∞—á–∏ ü•∞')
        return

    reply_markup = InlineKeyboardMarkup.from_column(
        [InlineKeyboardButton(
            i.get('lesson__title'), callback_data=f"LessonsView {i.get('id')} homeworks_list"
        ) for i in user_lessons]
    )

    update.message.reply_text('–ó–∞–¥–∞–Ω–∏—è –∫ —ç—Ç–∏–º —É—Ä–æ–∫–∞–º –º–æ–∂–Ω–æ —Å–¥–∞—Ç—å –∏–ª–∏ –æ–Ω–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ üìö', reply_markup=reply_markup)


def homeworks_send(update: Update, context: CallbackContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞"""

    schedule_id = context.user_data.get('schedule_id')
    task_url = update.message.text

    if not schedule_id:
        update.message.reply_text('–ö–∞–∫ —Ç–∞–∫–æ–µ —Å–ª—É—á–∏–ª–æ—Å—å? –û—à–∏–±–∫–∞ üò¢')
        return ConversationHandler.END

    user = User.objects.get(telegram_id=update.message.chat_id)
    result = send_student_homework(user, schedule_id, task_url)

    if result:
        update.message.reply_text(BotAnswer.objects.get(query='–†–∞–±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞').text)
        return ConversationHandler.END

    update.message.reply_text(BotAnswer.objects.get(query='–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞').text)
    return HOMEWORK_URL
